import type { Response } from "Http"
import type { Maybe } from "Maybe"
import type { Wish } from "Wish"

import type { Connection, Value } from "MadPostgres"
import type { IncomingRequest } from "MadServer"

import type { Error } from "./Error"

import ByteArray from "ByteArray"
import { Left, Right } from "Either"
import { Header } from "Http"
import Integer from "Integer"
import Json from "Json/Parse"
import JsonPrinter from "Json/Print"
import List from "List"
import { Just } from "Maybe"
import { bad, chainRej } from "Wish"

import MadPostgres from "MadPostgres"

import { connect, queryWithError } from "./DB"
import { BadInput, InsertFailed, ReadFailed, UnknownError } from "./Error"



// ----------- Type ---------------------------------------

alias Ingredient = {
  availableFrom :: Short,
  availableUntil :: Short,
  description :: String,
  name :: String,
}


// ----------- Parser -------------------------------------

short = map(Integer.toShort, Json.integer)


ingredientParser = Json.map4(
  (name, description, availableFrom, availableUntil) => (
    { name, description, availableFrom, availableUntil }
  ),
  Json.field("name", Json.string),
  Json.field("description", Json.string),
  Json.field("availableFrom", short),
  Json.field("availableUntil", short),
)


fromJson :: String -> Wish Error Ingredient
fromJson = (json) => where(Json.parse(ingredientParser, json)) {
  Right(ingredient) =>
    of(ingredient)

  Left(err) =>
    bad(BadInput(err))
}


// ----------- Printer ------------------------------------

ingredientPrinter = (ingredient) => JsonPrinter.object([
  #["name", JsonPrinter.string(ingredient.name)],
  #["description", JsonPrinter.string(ingredient.description)],
  #["availableFrom", JsonPrinter.integer(Integer.fromShort(ingredient.availableFrom))],
  #["availableUntil", JsonPrinter.integer(Integer.fromShort(ingredient.availableUntil))],
])

ingredientsPrinter = JsonPrinter.list(ingredientPrinter)


toJson :: Ingredient -> String
toJson = (ingredient) => JsonPrinter.printJson(80, ingredientPrinter(ingredient))

listToJson :: List Ingredient -> String
listToJson = (ingredients) => JsonPrinter.printJson(80, ingredientsPrinter(ingredients))


// ----------- DB -----------------------------------------
import IO from "IO"
parseIngredientRow :: List Value -> Wish Error Ingredient
parseIngredientRow = (row) => where(row) {
  [
    MadPostgres.VarCharValue(name),
    MadPostgres.VarCharValue(description),
    MadPostgres.Int2Value(availableFrom),
    MadPostgres.Int2Value(availableUntil),
  ] =>
    of({
      name,
      description,
      availableFrom: availableFrom,
      availableUntil: availableUntil,
    })

  or =>
    do {
      IO.cLog(or)
      return bad(UnknownError)
    }
}


insertIngredient :: Connection -> Ingredient -> Wish Error Ingredient
insertIngredient = (connection, ingredient) => do {
  result <- queryWithError(
    InsertFailed,
    `INSERT INTO ingredients VALUES(
      '${ingredient.name}',
      '${ingredient.description}',
      ${show(ingredient.availableFrom)},
      ${show(ingredient.availableUntil)}
    ) RETURNING *;`,
    connection,
  )

  return where(result) {
    [row] =>
      parseIngredientRow(row)

    or =>
      bad(UnknownError)
  }
}


selectIngredients :: Connection -> Wish Error (List Ingredient)
selectIngredients = (connection) => pipe(
  queryWithError(ReadFailed, "SELECT * FROM ingredients;"),
  chain(List.mapM(parseIngredientRow)),
)(connection)


// ----------- REST ---------------------------------------

DB_CONNECTION_RESPONSE = {
  status: 500,
  body: ByteArray.fromString(`{ "error": "connection to database could not be established" }`),
  headers: [Header("Content-Type", "application/json")],
}


error = (status, message) => (
  {
    status,
    body: ByteArray.fromString(`{ "error": "${message}" }`),
    headers: [Header("Content-Type", "application/json")],
  }
)


buildHttpError :: Wish Error a -> Wish (Response ByteArray) a
buildHttpError = (err) => chainRej(
  where {
    BadInput(_) =>
      bad(error(400, "Invalid input"))

    InsertFailed(_) =>
      bad(error(500, "Could not be created"))

    _ =>
      bad(error(500, "Internal error"))
  },
  err,
)


createIngredient :: IncomingRequest -> Wish (Response ByteArray) (Response ByteArray)
export createIngredient = (req) => do {
  connection <- chainRej(() => bad(DB_CONNECTION_RESPONSE), connect)

  return pipe(
    .body,
    ByteArray.toString,
    fromJson,
    chain(insertIngredient(connection)),
    chain(
      (ingredient) => of({
        status: 201,
        body: pipe(
          toJson,
          ByteArray.fromString,
        )(ingredient),
        headers: [Header("Content-Type", "application/json")],
      }),
    ),
    buildHttpError,
  )(req)
}


getAllIngredients :: IncomingRequest -> Wish (Response ByteArray) (Response ByteArray)
export getAllIngredients = () => do {
  connection <- chainRej(() => bad(DB_CONNECTION_RESPONSE), connect)

  return pipe(
    selectIngredients,
    chain(
      (ingredients) => of({
        status: 200,
        body: pipe(
          listToJson,
          ByteArray.fromString,
        )(ingredients),
        headers: [Header("Content-Type", "application/json")],
      }),
    ),
    buildHttpError,
  )(connection)
}
